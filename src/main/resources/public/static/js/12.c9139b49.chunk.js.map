{"version":3,"sources":["utils/request.ts","services/practice.ts","pages/Practice.tsx"],"names":["axios","defaults","baseURL","timeout","withCredentials","responseType","fetch","create","headers","interceptors","response","use","data","error","console","addPracticesHistory","params","request","post","getLikePractices","getPractices","getPracticesHistory","Question","styled","Item","Avatar","i","QuestionList","form","getFieldDecorator","validateFields","resetFields","user","JSON","parse","sessionStorage","getItem","useState","vis","setVis","total","rowsList","setData","questions","setQuestions","userId","id","pageNum","pageSize","setParams","useEffect","then","res","code","onClick","type","icon","style","marginBottom","itemLayout","dataSource","renderItem","item","index","href","url","title","color","status","textAlign","marginTop","simple","current","onChange","visible","onOk","err","values","onCancel","cancelText","okText","afterClose","labelCol","span","wrapperCol","label","rules","required","message","placeholder","map","Option","key","Group","value"],"mappings":"2GAAA,sBAKAA,IAAMC,SAASC,QAFU,GAGzBF,IAAMC,SAASE,QAAU,IACzBH,IAAMC,SAASG,iBAAkB,EACjCJ,IAAMC,SAASI,aAAe,OAE9B,IAAMC,EAAQN,IAAMO,OAAO,CACzBC,QAAS,CACP,eAAgB,sBAGpBF,EAAMG,aAAaC,SAASC,KAC1B,SAASD,GACP,OAAOA,EAASE,QAElB,SAASC,GAEP,OADAC,QAAQD,MAAMA,GACPA,KAIIP,O,iCCzBf,qJAEO,SAASS,EAAoBC,GAClC,OAAOC,IAAQC,KAAK,gCAAiCF,GAEhD,SAASG,EAAiBH,GAC/B,OAAOC,IAAQC,KAAK,6BAA8BF,GAE7C,SAASI,EAAaJ,GAC3B,OAAOC,IAAQC,KAAK,yBAA0BF,GAEzC,SAASK,EAAoBL,GAClC,OAAOC,IAAQC,KAAK,gCAAiCF,K,4+BCMvD,IAAMM,EAAWC,YAAO,IAAKC,KAAZD,CAAH,KAmBRE,EAASF,IAAOG,EAAV,KAYNC,EAAeJ,YAAO,IAAPA,CAAH,KAuHH,cAAKhB,QAAL,EA3Gf,YAEI,IAAD,IADDqB,KAAQC,EACP,EADOA,kBAAmBC,EAC1B,EAD0BA,eAAgBC,EAC1C,EAD0CA,YAErCC,EAAOC,KAAKC,MAAMC,eAAeC,QAAQ,SAD9C,EAEqBC,oBAAkB,GAFvC,mBAEMC,EAFN,KAEWC,EAFX,OAGuBF,mBAAc,CAAEG,MAAO,EAAGC,SAAU,KAH3D,mBAGM7B,EAHN,KAGY8B,EAHZ,OAIiCL,mBAAc,IAJ/C,mBAIMM,EAJN,KAIiBC,EAJjB,OAK2BP,mBAAc,CACxCQ,OAAQb,EAAKc,GACbC,QAAS,EACTC,SAAU,KARX,mBAKMhC,EALN,KAKciC,EALd,KAoCD,OAdAC,qBAAU,WACR7B,YAAoBL,GAAQmC,MAAK,SAAAC,GACd,MAAbA,EAAIC,MACNX,EAAQU,EAAIxC,WAGf,CAACI,IACJkC,qBAAU,WACR9B,YAAa,IAAI+B,MAAK,SAAAC,GACH,MAAbA,EAAIC,MACNT,EAAaQ,EAAIxC,KAAK6B,eAGzB,IAED,oCACE,uBACEa,QAAS,kBAAMf,GAAO,IACtBgB,KAAK,UACLC,KAAK,OACLC,MAAO,CAAEC,aAAc,KAJzB,4BAQA,kBAAC/B,EAAD,CACEgC,WAAW,aACXC,WAAYhD,EAAK6B,SACjBoB,WAAY,SAACC,EAAMC,GAAP,OACV,kBAACzC,EAAD,KACE,kBAACG,EAAD,KAASsC,GACT,uBAAGC,KAAMF,EAAKG,KAAO,IAAKH,EAAKI,OAC/B,0BAAMT,MAAO,CAAEU,MAAOL,EAAKM,OAAS,UAAY,YAC7CN,EAAKM,OAAS,eAAO,0BAK7BxD,EAAK4B,MAAQ,GACZ,uBACEiB,MAAO,CAAEY,UAAW,SAAUC,UAAW,GACzCC,QAAM,EACNC,QAASxD,EAAO+B,QAChBP,MAAO5B,EAAK4B,MACZiC,SAAU,SAAA1B,GAAO,OAAIE,GAAU,SAAAjC,GAAM,sBAAUA,EAAV,CAAkB+B,kBAG3D,uBACEmB,MAAM,2BACNQ,QAASpC,EACTqC,KA7De,WACnB7C,GAAe,SAAC8C,EAAKC,GACdD,GACH7D,YAAoB,eAAK8D,EAAN,CAAchC,OAAQb,EAAKc,MAAMK,MAAK,SAAAC,GACtC,MAAbA,EAAIC,OACNd,GAAO,GACPU,EAAU,CAAEJ,OAAQb,EAAKc,GAAIC,QAAS,EAAGC,SAAU,aAwDvD8B,SAAU,kBAAMvC,GAAO,IACvBwC,WAAW,eACXC,OAAO,eACPC,WAAY,kBAAMlD,MAElB,uBAAMmD,SAAU,CAAEC,KAAM,GAAKC,WAAY,CAAED,KAAM,KAC/C,sBAAM3D,KAAN,CAAW6D,MAAM,gBACdxD,EAAkB,QAAS,CAC1ByD,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,kEADpC3D,CAGC,uBAAQ4D,YAAY,gEACjB9C,EAAU+C,KAAI,SAAA5B,GAAI,OACjB,sBAAQ6B,OAAR,CAAeC,IAAK9B,EAAKI,OAAQJ,EAAKI,aAK9C,sBAAM1C,KAAN,CAAW6D,MAAM,gBACdxD,EAAkB,SAAU,CAC3ByD,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,wBADpC3D,CAGC,sBAAOgE,MAAP,KACE,uBAAOC,MAAO,GAAd,gBACA,uBAAOA,MAAO,GAAd","file":"static/js/12.c9139b49.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst isProd = process.env.NODE_ENV === \"production\";\r\nconst baseUrl = isProd ? \"\" : \"\";\r\n\r\naxios.defaults.baseURL = baseUrl;\r\naxios.defaults.timeout = 20000;\r\naxios.defaults.withCredentials = true;\r\naxios.defaults.responseType = \"json\";\r\n\r\nconst fetch = axios.create({\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n});\r\nfetch.interceptors.response.use(\r\n  function(response) {\r\n    return response.data;\r\n  },\r\n  function(error) {\r\n    console.error(error);\r\n    return error;\r\n  }\r\n);\r\n\r\nexport default fetch;\r\n","import request from \"../utils/request\";\r\n\r\nexport function addPracticesHistory(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/practice/addPracticesHistory\", params);\r\n}\r\nexport function getLikePractices(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/practice/getLikePractices\", params);\r\n}\r\nexport function getPractices(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/practice/getPractices\", params);\r\n}\r\nexport function getPracticesHistory(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/practice/getPracticesHistory\", params);\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  List,\r\n  Input,\r\n  Pagination,\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  Radio,\r\n  Select\r\n} from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  getPracticesHistory,\r\n  addPracticesHistory,\r\n  getPractices\r\n} from \"../services/practice\";\r\n\r\nconst Question = styled(List.Item)`\r\n  && {\r\n    padding: 12px 10px;\r\n    justify-content: center;\r\n    &:hover {\r\n      background: rgba(0, 0, 0, 0.1);\r\n    }\r\n    i {\r\n      position:absolute;\r\n      left: 5px;\r\n    }\r\n    span {\r\n      position:absolute;\r\n      right: 0;\r\n      width: 60px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Avatar = styled.i`\r\n  width: 25px;\r\n  height: 25px;\r\n  color: #fff;\r\n  background: #f0ad4e;\r\n  text-align: center;\r\n  font-style: normal;\r\n  font-size: 14px;\r\n  line-height: 25px;\r\n  border-radius: 50%;\r\n  box-shadow: 3px 3px 5px #515629;\r\n`;\r\nconst QuestionList = styled(List)`\r\n  && {\r\n    max-height: calc(100% - 80px);\r\n    overflow: overlay;\r\n  }\r\n`;\r\n\r\ninterface Data {\r\n  total: number;\r\n  rowsList: Array<{ id: number; title: string; url: string; status: number }>;\r\n}\r\n\r\nfunction Practice({\r\n  form: { getFieldDecorator, validateFields, resetFields }\r\n}) {\r\n  const user = JSON.parse(sessionStorage.getItem(\"user\"));\r\n  const [vis, setVis] = useState<boolean>(false);\r\n  const [data, setData] = useState<any>({ total: 0, rowsList: [] });\r\n  const [questions, setQuestions] = useState<any>([]);\r\n  const [params, setParams] = useState<any>({\r\n    userId: user.id,\r\n    pageNum: 1,\r\n    pageSize: 10\r\n  });\r\n  const handleSubmit = () => {\r\n    validateFields((err, values) => {\r\n      if (!err) {\r\n        addPracticesHistory({ ...values, userId: user.id }).then(res => {\r\n          if (res.code === 200) {\r\n            setVis(false);\r\n            setParams({ userId: user.id, pageNum: 1, pageSize: 10 });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    getPracticesHistory(params).then(res => {\r\n      if (res.code === 200) {\r\n        setData(res.data);\r\n      }\r\n    });\r\n  }, [params]);\r\n  useEffect(() => {\r\n    getPractices({}).then(res => {\r\n      if (res.code === 200) {\r\n        setQuestions(res.data.rowsList);\r\n      }\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => setVis(true)}\r\n        type=\"primary\"\r\n        icon=\"plus\"\r\n        style={{ marginBottom: 10 }}\r\n      >\r\n        添加记录\r\n      </Button>\r\n      <QuestionList\r\n        itemLayout=\"horizontal\"\r\n        dataSource={data.rowsList}\r\n        renderItem={(item, index) => (\r\n          <Question>\r\n            <Avatar>{index}</Avatar>\r\n            <a href={item.url || \"\"}>{item.title}</a>\r\n            <span style={{ color: item.status ? \"#1fa91f\" : \"#ef3d3d\" }}>\r\n              {item.status ? \"通过\" : \"未通过\"}\r\n            </span>\r\n          </Question>\r\n        )}\r\n      />\r\n      {data.total > 0 && (\r\n        <Pagination\r\n          style={{ textAlign: \"center\", marginTop: 5 }}\r\n          simple\r\n          current={params.pageNum}\r\n          total={data.total}\r\n          onChange={pageNum => setParams(params => ({ ...params, pageNum }))}\r\n        />\r\n      )}\r\n      <Modal\r\n        title=\"添加记录\"\r\n        visible={vis}\r\n        onOk={handleSubmit}\r\n        onCancel={() => setVis(false)}\r\n        cancelText=\"取消\"\r\n        okText=\"提交\"\r\n        afterClose={() => resetFields()}\r\n      >\r\n        <Form labelCol={{ span: 4 }} wrapperCol={{ span: 20 }}>\r\n          <Form.Item label=\"题目\">\r\n            {getFieldDecorator(\"title\", {\r\n              rules: [{ required: true, message: \"请输入题目名称或编号\" }]\r\n            })(\r\n              <Select placeholder=\"请输入题目名称或编号\">\r\n                {questions.map(item => (\r\n                  <Select.Option key={item.title}>{item.title}</Select.Option>\r\n                ))}\r\n              </Select>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item label=\"状态\">\r\n            {getFieldDecorator(\"status\", {\r\n              rules: [{ required: true, message: \"请选择\" }]\r\n            })(\r\n              <Radio.Group>\r\n                <Radio value={1}>通过</Radio>\r\n                <Radio value={0}>未通过</Radio>\r\n              </Radio.Group>\r\n            )}\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Form.create()(Practice);\r\n"],"sourceRoot":""}