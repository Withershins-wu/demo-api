{"version":3,"sources":["utils/request.ts","services/practice.ts","pages/Explore.tsx"],"names":["axios","defaults","baseURL","timeout","withCredentials","responseType","fetch","create","headers","interceptors","response","use","data","error","console","addPracticesHistory","params","request","post","getLikePractices","getPractices","getPracticesHistory","Wrap","styled","div","Search","QuestionWrap","Question","animated","a","attrs","p","href","link","Explore","useState","questions","setQuestions","transitions","useTransition","map","item","index","url","from","opacity","transform","enter","leave","unique","trail","config","mass","tension","friction","size","placeholder","onSearch","value","title","then","res","code","rowsList","props","key","style"],"mappings":"2GAAA,sBAKAA,IAAMC,SAASC,QAFU,GAGzBF,IAAMC,SAASE,QAAU,IACzBH,IAAMC,SAASG,iBAAkB,EACjCJ,IAAMC,SAASI,aAAe,OAE9B,IAAMC,EAAQN,IAAMO,OAAO,CACzBC,QAAS,CACP,eAAgB,sBAGpBF,EAAMG,aAAaC,SAASC,KAC1B,SAASD,GACP,OAAOA,EAASE,QAElB,SAASC,GAEP,OADAC,QAAQD,MAAMA,GACPA,KAIIP,O,iCCzBf,qJAEO,SAASS,EAAoBC,GAClC,OAAOC,IAAQC,KAAK,qCAAsCF,GAErD,SAASG,EAAiBH,GAC/B,OAAOC,IAAQC,KAAK,kCAAmCF,GAElD,SAASI,EAAaJ,GAC3B,OAAOC,IAAQC,KAAK,8BAA+BF,GAE9C,SAASK,EAAoBL,GAClC,OAAOC,IAAQC,KAAK,qCAAsCF,K,4pCCN5D,IAAMM,EAAOC,IAAOC,IAAV,KAKJC,EAASF,YAAO,IAAME,OAAbF,CAAH,KAMNG,EAAeH,IAAOC,IAAV,KAIZG,EAAWJ,YAAOK,IAASC,GAAGC,OAAM,SAAAC,GAAC,MAAK,CAAEC,KAAMD,EAAEE,QAAzCV,CAAH,KA6ECW,UArDf,WAAoB,IAAD,EACiBC,mBAAsB,IADvC,mBACVC,EADU,KACCC,EADD,KAGXC,EAAcC,YAClBH,EAAUI,KAAI,SAACC,EAAMC,GAAP,O,yVAAA,IAAuBD,EAAvB,CAA6BC,cAC3C,SAAAD,GAAI,OAAIA,EAAKE,MACb,CACEC,KAAM,CACJC,QAAS,EACTC,UAAW,6CAEbC,MAAO,CACLF,QAAS,EACTC,UAAW,oCAEbE,MAAO,CACLH,QAAS,EACTC,UAAW,0CAEbG,QAAQ,EACRC,MAAO,GACPC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAKC,SAAU,OAc/C,OACE,kBAAChC,EAAD,KACE,kBAACG,EAAD,CACE8B,KAAK,QACLC,YAAY,0CACZC,SAhBe,SAAAC,GACfA,EACFvC,YAAiB,CAAEwC,MAAOD,IAASE,MAAK,SAAAC,GACrB,MAAbA,EAAIC,MACNzB,EAAawB,EAAIjD,KAAKmD,aAI1B1B,EAAa,OAUb,kBAACX,EAAD,KACGY,EAAYE,KAAI,gBAAGC,EAAH,EAAGA,KAAMuB,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,IAAhB,OACf,kBAACtC,EAAD,CAAUsC,IAAKA,EAAKC,MAAOF,EAAO/B,KAAMQ,EAAKE,KAC1CF,GAAQA,EAAKkB","file":"static/js/11.606cb1b5.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst isProd = process.env.NODE_ENV === \"production\";\r\nconst baseUrl = isProd ? \"\" : \"\";\r\n\r\naxios.defaults.baseURL = baseUrl;\r\naxios.defaults.timeout = 20000;\r\naxios.defaults.withCredentials = true;\r\naxios.defaults.responseType = \"json\";\r\n\r\nconst fetch = axios.create({\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n});\r\nfetch.interceptors.response.use(\r\n  function(response) {\r\n    return response.data;\r\n  },\r\n  function(error) {\r\n    console.error(error);\r\n    return error;\r\n  }\r\n);\r\n\r\nexport default fetch;\r\n","import request from \"../utils/request\";\r\n\r\nexport function addPracticesHistory(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/demo/practice/addPracticesHistory\", params);\r\n}\r\nexport function getLikePractices(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/demo/practice/getLikePractices\", params);\r\n}\r\nexport function getPractices(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/demo/practice/getPractices\", params);\r\n}\r\nexport function getPracticesHistory(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/demo/practice/getPracticesHistory\", params);\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Input } from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport { useTransition, useSpring, animated } from \"react-spring\";\r\nimport { getLikePractices } from \"../services/practice\";\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\nconst Search = styled(Input.Search)`\r\n  && {\r\n    width: 80%;\r\n    margin-left: 10%;\r\n  }\r\n`;\r\nconst QuestionWrap = styled.div`\r\n  width: 60%;\r\n  margin-top: 20px;\r\n`;\r\nconst Question = styled(animated.a).attrs(p => ({ href: p.link }))`\r\n  display: flex;\r\n  height: 40px;\r\n  border-radius: 3px;\r\n  line-height: 40px;\r\n  color: #fff;\r\n  padding-left: 32px;\r\n  font-size: 14.5px;\r\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 2px 0px;\r\n  background: linear-gradient(135deg, #269562, #2c2c29);\r\n  margin-bottom: 4px;\r\n  &:hover {\r\n    color: #fff;\r\n    transform: scale(1.1) !important;\r\n    transition: transform 0.2s ease;\r\n  }\r\n`;\r\n\r\ninterface QuestionI extends G.AnyObject {\r\n  title: string;\r\n  id: string|number;\r\n  url: string;\r\n}\r\n\r\nfunction Explore() {\r\n  const [questions, setQuestions] = useState<QuestionI[]>([]);\r\n\r\n  const transitions = useTransition(\r\n    questions.map((item, index) => ({ ...item, index })),\r\n    item => item.url,\r\n    {\r\n      from: {\r\n        opacity: 0,\r\n        transform: \"skew(10deg, 0deg) translate(-20px, -20px)\"\r\n      },\r\n      enter: {\r\n        opacity: 1,\r\n        transform: \"skew(0deg, 0deg) translate(0, 0)\"\r\n      },\r\n      leave: {\r\n        opacity: 0,\r\n        transform: \"skew(10deg, 0deg) translate(20px,20px)\"\r\n      },\r\n      unique: true,\r\n      trail: 50,\r\n      config: { mass: 5, tension: 500, friction: 100 }\r\n    }\r\n  );\r\n  const handleSearch = value => {\r\n    if (value) {\r\n      getLikePractices({ title: value }).then(res => {\r\n        if (res.code === 200) {\r\n          setQuestions(res.data.rowsList);\r\n        }\r\n      });\r\n    } else {\r\n      setQuestions([]);\r\n    }\r\n  };\r\n  return (\r\n    <Wrap>\r\n      <Search\r\n        size=\"large\"\r\n        placeholder=\"搜索类似题目...\"\r\n        onSearch={handleSearch}\r\n      />\r\n      <QuestionWrap>\r\n        {transitions.map(({ item, props, key }) => (\r\n          <Question key={key} style={props} link={item.url}>\r\n            {item && item.title}\r\n          </Question>\r\n        ))}\r\n      </QuestionWrap>\r\n    </Wrap>\r\n  );\r\n}\r\n\r\nexport default Explore;\r\n"],"sourceRoot":""}