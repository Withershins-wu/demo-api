{"version":3,"sources":["utils/request.ts","services/practice.ts","pages/Questions.tsx"],"names":["axios","defaults","baseURL","timeout","withCredentials","responseType","fetch","create","headers","interceptors","response","use","data","error","console","addPracticesHistory","params","request","post","getLikePractices","getPractices","getPracticesHistory","getRecommendPractices","get","Question","styled","Item","Avatar","i","Search","QuestionList","Questions","useState","total","rowsList","setData","pageSize","pageNum","title","setParams","useEffect","then","res","code","placeholder","onSearch","itemLayout","dataSource","renderItem","item","index","href","url","style","textAlign","marginTop","simple","current","onChange"],"mappings":"2GAAA,sBAKAA,IAAMC,SAASC,QAFU,GAGzBF,IAAMC,SAASE,QAAU,IACzBH,IAAMC,SAASG,iBAAkB,EACjCJ,IAAMC,SAASI,aAAe,OAE9B,IAAMC,EAAQN,IAAMO,OAAO,CACzBC,QAAS,CACP,eAAgB,sBAGpBF,EAAMG,aAAaC,SAASC,KAC1B,SAASD,GACP,OAAOA,EAASE,QAElB,SAASC,GAEP,OADAC,QAAQD,MAAMA,GACPA,KAIIP,O,iCCzBf,uLAEO,SAASS,EAAoBC,GAClC,OAAOC,IAAQC,KAAK,gCAAiCF,GAEhD,SAASG,EAAiBH,GAC/B,OAAOC,IAAQC,KAAK,6BAA8BF,GAE7C,SAASI,EAAaJ,GAC3B,OAAOC,IAAQC,KAAK,yBAA0BF,GAEzC,SAASK,EAAoBL,GAClC,OAAOC,IAAQC,KAAK,gCAAiCF,GAEhD,SAASM,EACdN,GAEA,OAAOC,IAAQM,IAAI,kCAAmC,CAAEP,a,m6BCZ1D,IAAMQ,EAAWC,YAAO,IAAKC,KAAZD,CAAH,KAWRE,EAASF,IAAOG,EAAV,KAYNC,EAASJ,YAAO,IAAMI,OAAbJ,CAAH,KAMNK,EAAeL,YAAO,IAAPA,CAAH,KAgDHM,UAzCf,WAAsB,IAAD,EACKC,mBAAc,CAAEC,MAAO,EAAGC,SAAU,KADzC,mBACZtB,EADY,KACNuB,EADM,OAESH,mBAAS,CAAEI,SAAU,GAAIC,QAAS,EAAGC,MAAO,KAFrD,mBAEZtB,EAFY,KAEJuB,EAFI,KAUnB,OAPAC,qBAAU,WACRpB,YAAaJ,GAAQyB,MAAK,SAAAC,GACP,MAAbA,EAAIC,MACNR,EAAQO,EAAI9B,WAGf,CAACI,IAEF,oCACE,kBAACa,EAAD,CACEe,YAAY,8BACZC,SAAU,SAAAP,GAAK,OACbC,GAAU,SAAAvB,GAAM,sBAAUA,EAAV,CAAkBqB,QAAS,EAAGC,gBAGlD,kBAACR,EAAD,CACEgB,WAAW,aACXC,WAAYnC,EAAKsB,SACjBc,WAAY,SAACC,EAAMC,GAAP,OACV,kBAAC1B,EAAD,KACE,kBAACG,EAAD,KAAS,IAAMX,EAAOqB,QAAU,GAAKa,EAAQ,GAC7C,uBAAGC,KAAMF,EAAKG,KAAMH,EAAKX,WAI9B1B,EAAKqB,MAAQ,GACZ,uBACEoB,MAAO,CAAEC,UAAW,SAAUC,UAAW,IACzCC,QAAM,EACNC,QAASzC,EAAOqB,QAChBJ,MAAOrB,EAAKqB,MACZyB,SAAU,SAAArB,GAAO,OAAIE,GAAU,SAAAvB,GAAM,sBAAUA,EAAV,CAAkBqB","file":"static/js/13.6ea80ec7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst isProd = process.env.NODE_ENV === \"production\";\r\nconst baseUrl = isProd ? \"\" : \"\";\r\n\r\naxios.defaults.baseURL = baseUrl;\r\naxios.defaults.timeout = 20000;\r\naxios.defaults.withCredentials = true;\r\naxios.defaults.responseType = \"json\";\r\n\r\nconst fetch = axios.create({\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n});\r\nfetch.interceptors.response.use(\r\n  function(response) {\r\n    return response.data;\r\n  },\r\n  function(error) {\r\n    console.error(error);\r\n    return error;\r\n  }\r\n);\r\n\r\nexport default fetch;\r\n","import request from \"../utils/request\";\r\n\r\nexport function addPracticesHistory(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/practice/addPracticesHistory\", params);\r\n}\r\nexport function getLikePractices(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/practice/getLikePractices\", params);\r\n}\r\nexport function getPractices(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/practice/getPractices\", params);\r\n}\r\nexport function getPracticesHistory(params: G.AnyObject): Promise<G.Response> {\r\n  return request.post(\"/practice/getPracticesHistory\", params);\r\n}\r\nexport function getRecommendPractices(\r\n  params: G.AnyObject\r\n): Promise<G.Response> {\r\n  return request.get(\"/practice/getRecommendPractices\", { params });\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { List, Input, Pagination } from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport { getPractices } from \"../services/practice\";\r\n\r\nconst Question = styled(List.Item)`\r\n  justify-content: center;\r\n  i {\r\n    position: absolute;\r\n    left: 5px;\r\n  }\r\n  &:hover {\r\n    background: rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\n\r\nconst Avatar = styled.i`\r\n  min-width: 25px;\r\n  height: 25px;\r\n  color: #fff;\r\n  background: #f0ad4e;\r\n  text-align: center;\r\n  font-style: normal;\r\n  font-size: 12px;\r\n  line-height: 25px;\r\n  border-radius: 25px;\r\n  box-shadow: 3px 3px 5px #515629;\r\n`;\r\nconst Search = styled(Input.Search)`\r\n  && {\r\n    width: 230px;\r\n    margin-bottom: 15px;\r\n  }\r\n`;\r\nconst QuestionList = styled(List)`\r\n  && {\r\n    max-height: calc(100% - 90px);\r\n    overflow: overlay;\r\n  }\r\n`;\r\n\r\nfunction Questions() {\r\n  const [data, setData] = useState<any>({ total: 0, rowsList: [] });\r\n  const [params, setParams] = useState({ pageSize: 10, pageNum: 1, title: \"\" });\r\n  useEffect(() => {\r\n    getPractices(params).then(res => {\r\n      if (res.code === 200) {\r\n        setData(res.data);\r\n      }\r\n    });\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <Search\r\n        placeholder=\"搜索题库...\"\r\n        onSearch={title =>\r\n          setParams(params => ({ ...params, pageNum: 1, title }))\r\n        }\r\n      />\r\n      <QuestionList\r\n        itemLayout=\"horizontal\"\r\n        dataSource={data.rowsList}\r\n        renderItem={(item, index) => (\r\n          <Question>\r\n            <Avatar>{10 * (params.pageNum - 1) + index + 1}</Avatar>\r\n            <a href={item.url}>{item.title}</a>\r\n          </Question>\r\n        )}\r\n      />\r\n      {data.total > 0 && (\r\n        <Pagination\r\n          style={{ textAlign: \"center\", marginTop: 20 }}\r\n          simple\r\n          current={params.pageNum}\r\n          total={data.total}\r\n          onChange={pageNum => setParams(params => ({ ...params, pageNum }))}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Questions;\r\n"],"sourceRoot":""}