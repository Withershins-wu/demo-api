{"version":3,"sources":["serviceWorker.js","dva/index.ts","models/global.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","models","model","push","start","sagaMiddleware","createSagaMiddleware","reducers","tasks","subscriptions","forEach","namespace","state","action","type","includes","split","reduces","_put","put","take","startsWith","effects","call","select","fork","delay","applyModel","this","store","createStore","combineReducers","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","next","task","run","dispatch","subscripter","Object","keys","key","count","add","sub","addEffect","init","app","global","App","lazy","Login","ReactDOM","render","fallback","style","marginTop","marginLeft","transform","spinning","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qFCIAC,EAAkB,GAGxB,SAASC,EAAMA,GACbD,EAAOE,KAAKD,GAmEd,SAASE,IAAkB,IAAD,OAElBC,EAAiBC,cAFC,EA/D1B,SACEL,GAOA,IAAMM,EAA8B,GAC9BC,EAA6B,GAC7BC,EAAyC,GAkD/C,OAhDAR,EAAOS,SAAQ,SAAAR,GAEbO,EAAcN,KAAK,CAACD,EAAMO,cAAeP,EAAMS,YAE/CJ,EAASL,EAAMS,WAAa,WAGzB,IAFDC,EAEA,uDAFaV,EAAMU,MACnBC,EACA,uCAEA,IAAKA,EAAOC,KAAKC,SAAS,MAAO,OAELF,EAAOC,KAAKE,MAAM,KAFb,mBAExBL,EAFwB,KAEbG,EAFa,KAG/B,OAAIZ,EAAMe,QAAQH,IAASH,IAAcT,EAAMS,UACtCT,EAAMe,QAAQH,GAAMF,EAAOC,GAE7BD,EAET,OAAOA,GAIT,IAAMM,EAAI,UAAG,SAAPA,EAAiBL,GAAV,iEACX,OADW,SACLM,YAAI,eAAKN,EAAN,CAAcC,KAAK,GAAD,OAAKZ,EAAMS,UAAX,YAAwBE,EAAOC,SAD/C,oCAAPI,MAINV,EAAML,KAAN,UAAW,4FAEa,OAFb,SAEmBiB,aAAK,SAACP,GAAD,OAC7BA,EAAOC,KAAKO,WAAWnB,EAAMS,cAHxB,UAEDE,EAFC,SAMmBA,EAAOC,KAAKE,MAAM,KANrC,mBAMAL,EANA,KAMWG,EANX,KAOHH,IAAcT,EAAMS,UAPjB,yDAWHT,EAAMoB,QAAQR,GAXX,iBAYL,OAZK,UAYCS,YAAKrB,EAAMoB,QAAQR,GAAOD,EAAQ,CACtCU,SACAJ,IAAKD,EACLM,WACAC,SACAC,YAjBG,sEAuBN,CAAEnB,WAAUC,QAAOC,iBAMiBkB,CAAW1B,GAA9CM,EAHgB,EAGhBA,SAAUC,EAHM,EAGNA,MAAOC,EAHD,EAGCA,cAuBzB,OAtBAmB,KAAKC,MAAQC,YACXC,YAAgBxB,GAChByB,YACEC,YAAgB5B,GACfR,OAAeqC,6BACXrC,OAAeqC,+BAChB,SAAAC,GAAI,OAAIA,KAIhB3B,EAAME,SAAQ,SAAA0B,GAAI,OAAI/B,EAAegC,IAAID,MACzCR,KAAKU,SAAWV,KAAKC,MAAMS,SAE3B7B,EAAcC,SAAQ,SAAA6B,GACpB,IAAM5B,EAAY4B,EAAY,GACxBD,EAAW,SAACzB,GAChB,EAAKgB,MAAMS,SAAX,eAAyBzB,EAAzB,CAAiCC,KAAK,GAAD,OAAKH,EAAL,YAAkBE,EAAOC,UAEhE0B,OAAOC,KAAKF,EAAY,IAAI7B,SAAQ,SAAAgC,GAClCH,EAAY,GAAGG,GAAK,CAAEJ,mBAGnBV,KAAKC,MCpHd,IAyBe3B,EAzBM,CACnBS,UAAW,SACXC,MAAO,CACL+B,MAAO,GAET1B,QAAS,CACP2B,IADO,SACHhC,EAAOC,GACT,OAAO,eAAKD,EAAZ,CAAmB+B,MAAO/B,EAAM+B,MAAQ,KAE1CE,IAJO,SAIHjC,EAAOC,GACT,OAAO,eAAKD,EAAZ,CAAmB+B,MAAO/B,EAAM+B,MAAQ,MAG5CrB,QAAS,CACNwB,UADM,qBACIjC,EADJ,4EAEL,OAFK,EACsBU,KAAMJ,EAD5B,EAC4BA,IAAKO,EADjC,EACiCA,MADjC,SAECA,EAAM,KAFP,OAGL,OAHK,SAGCP,EAAI,CAAEL,KAAM,QAHb,2CAMTL,cAAe,CACbsC,KADa,aAEXT,EADyC,EAApCA,UACI,CAAExB,KAAM,WCdjBkC,G,MFgHa,CACf9C,QACAE,QACAyB,MAAO,KACPS,SAAU,OEnHdU,EAAI9C,MAAM+C,GACVD,EAAI5C,QAEJ,IAAM8C,EAAMC,gBAAK,kBAAM,gEACjBC,EAAQD,gBAAK,kBAAM,4EAEzBE,IAASC,OACP,kBAAC,IAAD,CAAUzB,MAAOmB,EAAInB,OACnB,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAU0B,SAAU,uBAAMC,MAAO,CAAEC,UAAW,MAAOC,WAAY,MAAOC,UAAW,yBAA2BC,UAAQ,KACpH,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWV,IAChC,kBAAC,IAAD,CAAOS,KAAK,IAAIC,UAAWZ,QAKlCa,SAAsBC,eAAe,SHqGlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cd07781e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { take, put, call, select, fork, delay } from \"redux-saga/effects\";\r\nimport { Reducer, Action, ReducersMapObject, Store, Dispatch } from \"redux\";\r\n\r\n// Model 初始化钩子\r\nexport interface Subscripter extends G.AnyObject<(...args: any[]) => any> {}\r\n// Model\r\nexport interface Model {\r\n  namespace: string;\r\n  state: any;\r\n  reduces: G.AnyObject<Reducer>;\r\n  effects: G.AnyObject;\r\n  subscriptions: Subscripter;\r\n}\r\nexport interface App {\r\n  model: typeof model;\r\n  start: typeof start;\r\n  store: Store | null;\r\n  dispatch: Dispatch | null;\r\n}\r\n// 暂存 app.model的model, start之后载入\r\nconst models: Model[] = [];\r\n\r\n// app.model\r\nfunction model(model: Model) {\r\n  models.push(model);\r\n}\r\n\r\n// 载入model\r\nfunction applyModel(\r\n  models: Model[]\r\n): {\r\n  reducers: ReducersMapObject;\r\n  tasks: (() => Generator)[];\r\n  subscriptions: [Subscripter, string][];\r\n} {\r\n  // reducers: 对应redux的reducer， tasks: saga的watch, subscriptions: 初始化钩子\r\n  const reducers: ReducersMapObject = {};\r\n  const tasks: (() => Generator)[] = [];\r\n  const subscriptions: [Subscripter, string][] = [];\r\n  // 遍历处理\r\n  models.forEach(model => {\r\n    // 钩子先暂存，redux store生成之后再执行\r\n    subscriptions.push([model.subscriptions, model.namespace]);\r\n    // 加入reducers, {a: aReducer, b: bReducer}, 方便combineReducers\r\n    reducers[model.namespace] = function(\r\n      state: any = model.state,\r\n      action: Action\r\n    ) {\r\n      // @@ 一般是saga启动的action, 不进行reducer处理\r\n      if (!action.type.includes(\"@@\")) {\r\n        // action: {namespace}/{name} | e. global/add\r\n        const [namespace, type] = action.type.split(\"/\");\r\n        if (model.reduces[type] && namespace === model.namespace) {\r\n          return model.reduces[type](state, action);\r\n        }\r\n        return state;\r\n      }\r\n      return state;\r\n    };\r\n\r\n    // 重写put方法，加入namespace前缀\r\n    const _put = function*(action: Action) {\r\n      yield put({ ...action, type: `${model.namespace}/${action.type}` });\r\n    };\r\n    // take每个model，分别监听\r\n    tasks.push(function*() {\r\n      while (true) {\r\n        const action: any = yield take((action: Action) =>\r\n          action.type.startsWith(model.namespace)\r\n        );\r\n        // 获取无前缀的action type\r\n        const [namespace, type] = action.type.split(\"/\");\r\n        if (namespace !== model.namespace) {\r\n          continue;\r\n        }\r\n        // 调用effect\r\n        if (model.effects[type]) {\r\n          yield call(model.effects[type], action, {\r\n            call,\r\n            put: _put,\r\n            select,\r\n            fork,\r\n            delay\r\n          } as G.AnyObject);\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return { reducers, tasks, subscriptions };\r\n}\r\n\r\nfunction start(this: App) {\r\n  // 生成saga middleware\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const { reducers, tasks, subscriptions } = applyModel(models);\r\n  this.store = createStore(\r\n    combineReducers(reducers),\r\n    compose(\r\n      applyMiddleware(sagaMiddleware),\r\n      (window as any).__REDUX_DEVTOOLS_EXTENSION__\r\n        ? (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n        : next => next\r\n    )\r\n  );\r\n  // 执行task任务，启动监听\r\n  tasks.forEach(task => sagaMiddleware.run(task));\r\n  this.dispatch = this.store.dispatch;\r\n  // 执行钩子函数\r\n  subscriptions.forEach(subscripter => {\r\n    const namespace = subscripter[1];\r\n    const dispatch = (action: Action) => {\r\n      this.store.dispatch({ ...action, type: `${namespace}/${action.type}` });\r\n    };\r\n    Object.keys(subscripter[0]).forEach(key => {\r\n      subscripter[0][key]({ dispatch });\r\n    });\r\n  });\r\n  return this.store;\r\n}\r\nexport default function dva() {\r\n  const app: App = {\r\n    model,\r\n    start,\r\n    store: null,\r\n    dispatch: null\r\n  };\r\n  return app;\r\n}\r\n","import { Action, Dispatch } from \"redux\";\r\nimport { Model } from \"../dva\";\r\n\r\nconst model: Model = {\r\n  namespace: \"global\",\r\n  state: {\r\n    count: 0\r\n  },\r\n  reduces: {\r\n    add(state, action: Action) {\r\n      return { ...state, count: state.count + 1 };\r\n    },\r\n    sub(state, action: Action) {\r\n      return { ...state, count: state.count - 1 };\r\n    }\r\n  },\r\n  effects: {\r\n    *addEffect(action: Action, { call, put, delay }: G.AnyObject) {\r\n      yield delay(1000);\r\n      yield put({ type: \"add\" });\r\n    }\r\n  },\r\n  subscriptions: {\r\n    init({ dispatch }: { dispatch: Dispatch }) {\r\n      dispatch({ type: \"add\" });\r\n    }\r\n  }\r\n};\r\nexport default model;\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Spin } from \"antd\";\r\nimport dva from \"./dva/index\";\r\nimport global from \"./models/global\";\r\nimport \"./index.css\";\r\n\r\nconst app = dva();\r\napp.model(global);\r\napp.start();\r\n\r\nconst App = lazy(() => import(\"./App\"));\r\nconst Login = lazy(() => import(\"./pages/Login\"));\r\n\r\nReactDOM.render(\r\n  <Provider store={app.store}>\r\n    <Router>\r\n      <Suspense fallback={<Spin style={{ marginTop: \"30%\", marginLeft: '50%', transform: 'translate(-50%, -50%)' }} spinning />}>\r\n        <Switch>\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/\" component={App} />\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  </Provider>,\r\n  (document as Document).getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}